{"version":3,"file":"Text.5e3c167b.js","sources":["../../src/components/Text.tsx"],"sourcesContent":["// Isso aqui é qualquer coisa(COMPONENT/TAG) valida como children(filho/criança) no react\nimport { ReactNode } from 'react'\n\nimport { Slot } from '@radix-ui/react-slot'\n\n// Pra fazer condicionais no css\nimport { clsx } from 'clsx'\n\nexport interface TextProps {\n  size?: 'sm' | 'md' | 'lg'\n  children: ReactNode\n  asChild?: boolean\n  // O className é para caso futuramente eu queira adicionar novas classes\n  className?: string\n}\n\nexport function Text({ size = 'md', children, asChild, className }: TextProps) {\n  // Se asChield for true, ela usa o Slot como component e com isso o Slot pega o filho dele e o transforma como o componente principal o substituindo\n  const Comp = asChild ? Slot : 'span'\n  return (\n    <Comp\n      className={clsx(\n        'text-gray-100 font-sans',\n        {\n          'text-xs': size === 'sm',\n          'text-sm': size === 'md',\n          'text-md': size === 'lg'\n        },\n        className\n      )}\n    >\n      {children}\n    </Comp>\n  )\n}\n"],"names":["Text","size","children","asChild","_jsx","Slot","clsx","className","__name"],"mappings":"qNAgBO,SAAAA,EAAA,CAAc,KAAAC,EAAA,KAAS,SAAAC,EAAMA,QAAAA,EAAUC,UAAAA,CAA8B,EAAA,CAG1E,OAAAC,EADAD,EAAAE,EAAA,OACA,CACO,UAAAC,EAAA,0BAAA,CAGD,UAAAL,IAAA,KACsB,UAAAA,IAAA,KACA,UAAAA,IAAA,IACA,EAAAM,CAAA,EAEb,SAAAL,CACT,CAAA,CAKR,CAlBOM,EAAAR,EAAA"}